import Head from 'next/head'
import Link from 'next/link'
import axios from 'axios'
import PostHeader from '../../../components/post/header'
import CommentsList from '../../../components/post/comment/body'
import LikesList from '../../../components/post/likes'
import { useEffect, useState } from "react";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons'
import styles from '/styles/post/post.module.css'
import PostContent from '../../../components/post/content'
import { useRouter } from 'next/router'


import IndexHeader from "../../../layout/home/header";
import IndexSidebar from "../../../layout/home/sidebar";
import PostList from "../../../components/common/postList";
import Auth from "../../account/auth";
import styles2 from "/styles/index.module.css"


export const getServerSideProps = async context => {
    const { postId } = context.params

    return {
        props: {
            postId: postId
        }
    }
}

const PostPage = ({ postId }) => {
    const [info, setInfo] = useState([]);
    const [commentCount, setCommentCount] = useState(0)
    const [data, setData] = useState([])
    const [likes, setLikes] = useState([])
    const [user, setUser] = useState([])
    const [showComments, setShowComments] = useState(false)
    const [postLiked, setPostLiked] = useState(false) // Í≤åÏãúÍ∏ÄÏóê ÎåÄÌïú Ï¢ãÏïÑÏöî ÏÉÅÌÉú
    const [faChevron, setFaChevron] = useState(false) // Í≥µÍ∞êÏàò Î¶¨Ïä§Ìä∏ ÏÉÅÌÉú
    const [requestTime, setRequestTime] = useState(new Date())
    const router = useRouter()

    const getInfo = async () => {
        axios({
          method: "get",
          url: "/api/info",
        }).then((res) => {
          setInfo(res.data !== undefined ? res.data.data : null);
        });
      };

    // Í≥µÍ∞êÏàò ÌÜ†Í∏Ä
    const toggleFaChevron = () => {
        if (showComments) {
            setShowComments(false)
        }
        setFaChevron(!faChevron)
    }

    // Ìè¨Ïä§Ìä∏ Ï¢ãÏïÑÏöî ÌÜ†Í∏Ä
    const togglePostLike = () => {
        if (user !== null) {
            axios({
                method: 'post',
                params: {
                    postId: postId,
                    userId: user.id,
                },
                url: '/api/post/response/update',
            }).then(_ => {
                setPostLiked(!postLiked)
            })
        } else {
            alert('Î°úÍ∑∏Ïù∏ ÌõÑ Ïù¥Ïö©Ìï¥Ï£ºÏÑ∏Ïöî.')
        }
    }

    // ÎåìÍ∏Ä ÌëúÏãú ÏÉÅÌÉú ÌÜ†Í∏Ä Ìï®Ïàò
    const toggleComments = () => {
        if (faChevron) {
            setFaChevron(false)
        }
        setShowComments(!showComments)
    }

    // Í≥µÏú†ÌïòÍ∏∞ Î≤ÑÌäº
    const handleShareClick = () => {
        navigator.clipboard
            .writeText(window.location.origin + window.location.pathname)
            .then(() => {
                alert('URLÏù¥ ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§.') // ÏÑ±Í≥µ Î©îÏãúÏßÄ
            })
            .catch((err) => {
                console.error('URL Î≥µÏÇ¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', err) // Ïò§Î•ò Î©îÏãúÏßÄ
            })
    }

    useEffect(() => {
        setUser(JSON.parse(localStorage.getItem('user')))

        axios({
            method: "get",
            params: {
                postId: postId,
            },
            url: "/api/post/view",
        }).then((res) => {
            setData(res.data)

            if (!res.data && res.data?.post === null && res.data?.post?.deleted === 1) {
                alert('ÏÇ≠Ï†úÎêêÍ±∞ÎÇò ÏóÜÎäî Í≤åÏãúÍ∏ÄÏûÖÎãàÎã§.')
                router.push("/")
                return
            } else if (res.data?.post?.type == 1 && user?.role?.roleEntity?.id == 1) {
                alert('Í≤åÏãúÍ∏ÄÏùÑ Ïó¥ÎûåÌï† Ïàò ÏûàÎäî Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.')
                router.push("/")
                return
            }
            axios({
                method: 'get',
                params: {
                    postId: postId
                },
                url: '/api/comment/count'
            })
            .then(res => setCommentCount(res.data))
            
            // Í≤åÏãúÍ∏Ä Ï¢ãÏïÑÏöî Î¶¨Ïä§Ìä∏
            axios({
                method: 'get',
                params: {
                    postId: postId, // postIdÎ•º propÏúºÎ°úÎ∂ÄÌÑ∞ Î∞õÏïÑÏò§ÎèÑÎ°ù ÏàòÏ†ïÌñàÏäµÎãàÎã§.
                },
                url: '/api/post/response/list',
            }).then((res) => {
                setLikes(res.data)
            })
    
            // Î°úÍ∑∏Ïù∏ ÎêòÏñ¥ ÏûàÏúºÎ©¥ Í≤åÏãúÍ∏Ä Ï¢ãÏïÑÏöî Ïó¨Î∂Ä Ï≤¥ÌÅ¨
            axios({
                method: 'post',
                params: {
                    postId: postId,
                    userId: user?.id,
                },
                url: '/api/post/response/exist',
            }).then((res) => {
                setPostLiked(res.data)
            })
        })
        .catch(_ => router.push("/404"))

        getInfo();
    }, [postId, postLiked, requestTime, user?.id])

  return (
    <>
      <Head>
                <title>Í≤åÏãúÍ∏Ä</title>
                <meta property='og:title' content='Í≤åÏãúÍ∏Ä' key='title' />
            </Head>
      <Auth/>
      <div className={styles2.wrap}>
        <div style={{position:'fixed',width:'100vw', backgroundColor: 'var(--bs-body-bg)', zIndex:'1000' }}>
          <IndexHeader info={info} requestTime={requestTime} setRequestTime={setRequestTime} />
        </div>

        <div style={{zIndex:'1000', backgroundColor: 'var(--bs-body-bg)'}}>
          <IndexSidebar info={info}/>
        </div>

        <div style={{boxSizing: 'border-box'}} className={styles2.content}>
            
            <PostList categoryId={1} />
            <div className='wrap'>
                <div className='container'>
                    <PostHeader post={data?.post} />
                    <main className={`${styles.mainContainer} container`}>
                        <PostContent post={data?.post} />
                    </main>
                    <footer className={styles.footerContainer}>
                        {/* hashtag */}
                        <div className={styles.hashtagBox}>
                            {data?.hashtags?.map((mapper, idx) => (
                                <div key={idx}>
                                    <Link href='#'>
                                        <a>
                                            <span className={styles.hashtag}>#{mapper.content}</span>
                                        </a>
                                    </Link>
                                </div>
                            ))}
                        </div>
                        <div className={styles.footerBtnContainer}>
                            {/* Î≤ÑÌäº left Î¶¨Ïä§Ìä∏ */}
                            <div className={styles.footerBtnList}>
                                <div className={styles.footerLikeComment}>
                                    {/* Ï¢ãÏïÑÏöî Î≤ÑÌäº */}
                                    <div className={styles.footerLikesBox}>
                                        <button
                                            className={styles.likeButton}
                                            onClick={togglePostLike}
                                        >
                                            <span className={styles.likeIcon}>
                                                {postLiked ? '‚ù§Ô∏è' : 'ü§ç'}
                                            </span>
                                            <span className={styles.likeCount}>
                                                {likes.length} Ï¢ãÏïÑÏöî
                                            </span>
                                        </button>

                                        <button
                                            className={`${styles.faChevronButton} btn btn-light`}
                                            onClick={toggleFaChevron}
                                        >
                                            <span className={styles.faChevronIcon}>
                                                {faChevron ? (
                                                    <FontAwesomeIcon icon={faChevronUp} size='2x' />
                                                ) : (
                                                    <FontAwesomeIcon icon={faChevronDown} size='2x' />
                                                )}
                                            </span>
                                        </button>
                                    </div>
                                    {/* ÎåìÍ∏Ä Î≤ÑÌäº */}
                                    <button
                                        className={`${styles.commentButton} btn btn-light`}
                                        style={{
                                            margin: '5px'
                                        }}
                                        onClick={toggleComments}
                                    >
                                        ÎåìÍ∏Ä {commentCount}Í∞ú&nbsp;
                                        {showComments ? (
                                            <FontAwesomeIcon icon={faChevronUp} width={15} />
                                        ) : (
                                            <FontAwesomeIcon icon={faChevronDown} width={15} />
                                        )}
                                    </button>
                                </div>
                            </div>
                            {/* Î≤ÑÌäº Ïò§Î•∏Ï™Ω Î¶¨Ïä§Ìä∏ */}
                            <div className={styles.footerLinkList}>
                                {/* <FontAwesomeIcon icon={faGithub} size='1x'/> */}
                                <button
                                    className={`${styles.shareButton} btn btn-Light`}
                                    onClick={handleShareClick}
                                >
                                    Í≥µÏú†ÌïòÍ∏∞
                                </button>
                            </div>
                        </div>

                        {/* Í≥µÍ∞êÏûê Î™©Î°ù */}
                        <LikesList likes={likes} isVisible={faChevron} />

                        {/* ÎåìÍ∏Ä Î™©Î°ù */}
                        {showComments && (
                            <CommentsList
                                pid={postId}
                                requestTime={requestTime}
                                setRequestTime={setRequestTime}
                            />
                        )}

                        {/* Í¥ëÍ≥† */}
                        <div className={styles.footerAdList}>
                            <div className={styles.footerAdContent}>
                                <span>ÌååÏõåÎßÅÌÅ¨ Í¥ëÍ≥†ÏûÖÎãàÎã§.</span>
                                <Link href='/'>
                                    <a>
                                        <span>Í¥ëÍ≥†ÏïàÎÇ¥</span>
                                    </a>
                                </Link>
                            </div>
                            <hr className={styles.footerAdDivisor} />
                            <ul className={styles.storeList}>
                                <li className={styles.storeItem}>
                                    <Link href='/'>
                                        <a className={styles.storeLink}>Î™ÖÏäπÎÜçÏõê</a>
                                    </Link>
                                    <button className={styles.payButton}>Pay</button>
                                    <div className={styles.storeDescription}>
                                        Ïò¨Ïù∏Ïõê ÏÑ†Î¨ºÏÑ∏Ìä∏ 3ÎåÄÎ•º Ïñ¥Î®∏ÎãàÍªò Ï†ÑÎã¨Ìï† Ïàò ÏûàÎäî ÌôïÏã§Ìïú
                                        ÌåêÎß§Ï≤òÎ•º ÌÜµÌï¥ Ï†úÍ≥µ
                                    </div>
                                </li>
                                <li className={styles.storeItem}>
                                    <Link href='/'>
                                        <a className={styles.storeLink}>ÏßÑÏõêÏî®_LOTTE ON</a>
                                    </Link>
                                    <button className={styles.payButton}>Pay</button>
                                    <div className={styles.storeDescription}>
                                        ÏßÑÏõêÏî®Ïùò ÏΩîÎî©Ïã§Î†•ÏùÑ ÌåêÎß§Ìï©ÎãàÎã§.
                                    </div>
                                </li>
                                <li className={styles.storeItem}>
                                    <Link href='/'>
                                        <a className={styles.storeLink}>ÎèôÏùòÎåÄ ON</a>
                                    </Link>
                                    <button className={styles.payButton}>Pay</button>
                                    <div className={styles.storeDescription}>
                                        Í∑∏Î•º Îç∞Î¶¨Í≥† Í∞ÄÍ≥† Ïã∂Îã§Î©¥ ÎßÅÌÅ¨Î•º ÌÅ¥Î¶≠!!
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </footer>
                </div>
            </div>
        </div>
      </div>
    </>
  )
}

export default PostPage