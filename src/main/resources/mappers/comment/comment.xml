<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dita.metapilot.comment.repository.CommentRepository">
    <resultMap id="comments" type="com.dita.metapilot.comment.entity.CommentEntity">
        <result property="id" column="id"/>
        <result property="postId" column="post_tbl_id"/>
        <result property="refId" column="comment_tbl_ref_id"/>
        <result property="rootId" column="comment_tbl_root_id"/>
        <result property="userId" column="user_tbl_id"/>
        <result property="content" column="content"/>
        <result property="depth" column="depth"/>
        <result property="visible" column="visible"/>
        <result property="createdAt" column="created_at"/>
        <result property="nickname" column="nickname"/>
        <result property="refUserId" column="ref_user_id"/>
        <result property="refNickname" column="ref_nickname"/>
        <result property="profileImage" column="profile_image"/>
        <result property="likeCount" column="likes"/>
    </resultMap>

    <insert id="createComment"
            parameterType="com.dita.metapilot.comment.dto.RefDto">
        insert into comment_tbl (
            post_tbl_id,
            comment_tbl_ref_id,
            comment_tbl_root_id,
            user_tbl_id,
            content,
            depth,
            visible,
            created_at
        )
        values (
            #{postId},
            <!-- 대댓글이 참조하는 댓글의 ID -->
            <choose>
                <when test="depth > 0">
                    #{refId}
                </when>
                <otherwise>
                    null
                </otherwise>
            </choose>,
            <!-- 대댓글이 속한 최상위 댓글의 ID -->
            #{rootId},
            #{userId},
            #{content},
            #{depth},
            #{visible},
            now()
        )
    </insert>

    <delete id="deleteComment"
            parameterType="com.dita.metapilot.comment.dto.CommentDto">
        delete from
            comment_tbl
        where
            id = #{id}
    </delete>

    <select id="getLastId" resultType="long">
        select
            distinct last_insert_id()
        from
            comment_tbl
    </select>

    <select id="getRootId" parameterType="com.dita.metapilot.comment.dto.CommentDto" resultType="long">
        select
            comment_tbl_root_id
        from
            comment_tbl ct
        where
            ct.id = #{id}
    </select>

    <select id="getCommentCount" parameterType="com.dita.metapilot.comment.dto.PostRequestDto" resultType="long">
        <![CDATA[
            select
                count(*)
            from
                comment_tbl ct
            where
                ct.post_tbl_id = #{postId}
            and
                ct.visible <> 2
        ]]>
    </select>

    <select id="getCommentList"
            resultMap="comments"
            parameterType="com.dita.metapilot.comment.dto.PostRequestDto">
        select
            ct.*,
            ut.nickname,
            ut.profile_image,
            ut2.id as ref_user_id,
            ut2.nickname as ref_nickname,
            (
                select
                    count(*)
                from
                    comment_like_tbl clt
                where
                    clt.comment_tbl_id = ct.id
            ) as likes
        from
            comment_tbl ct
        join
            user_tbl ut
        on
            ct.user_tbl_id = ut.id
        left outer join
            comment_tbl ct2
        on
            ct.comment_tbl_ref_id = ct2.id
        left outer join
            user_tbl ut2
        on
            ct2.user_tbl_id = ut2.id
        where
            ct.post_tbl_id = #{postId}
        and
            ct.visible >= #{visible}
        order by
            comment_tbl_root_id,
            id
    </select>

    <select id="hasSibling" parameterType="com.dita.metapilot.comment.dto.CommentDto" resultType="boolean">
        <![CDATA[
            select
                count(*) > 1
            from
                comment_tbl ct
            where
                ct.comment_tbl_root_id = #{id}
            and
                ct.visible <> 2
        ]]>
    </select>

    <update id="updateComment"
            parameterType="com.dita.metapilot.comment.dto.CommentDto">
        update
            comment_tbl
        set
            content = #{content},
            visible = #{visible}
        where
            id = #{id}
    </update>

    <update id="updateRootComment" parameterType="com.dita.metapilot.comment.dto.CommentDto">
        update
            comment_tbl
        set
            content = '댓글이 삭제되었습니다.',
            created_at = null,
            visible = 2
        where
            id = #{id}
    </update>

    <update id="updateRootId"
            parameterType="com.dita.metapilot.comment.dto.RefDto">
        update
            comment_tbl
        set
            comment_tbl_root_id = #{id}
        where
            id = #{id}
    </update>
</mapper>
